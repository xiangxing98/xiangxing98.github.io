# -*- encoding: utf-8 -*-
# !/usr/bin/env python
'''
@File    :   lesson57_Regular_Expression_4.py
@Time    :   2020/05/05 12:22:15
@Author  :   Stone_Hou
@Version :   1.0
@Contact :   xiangxing985529@163.com
@License :   (C)Copyright 2010-2020, Stone_Hou
@Desc    :   None
@Refer   :   https://github.com/xiangxing98
'''

# here put the import lib
import re


# 匹配手机号
# 匹配手机号，其实就是找出一串连续的数字。更进一步，是11位，以1开头的数字。
# 匹配数字，我们可以用[0123456789]
# 由于它们是连续的字符，有一种简化的写法：[0-9]。类似的还有[a-zA-Z]的用法。
# 还有另一种表示数字的方法：\d
# 要表示任意长度的数字，就可以用[0-9]*或者\d*

# 但要注意的是，*表示的任意长度包括0，也就是没有数字的空字符也会被匹配出来。
# 一个与*类似的符号+，表示的则是1个或更长。
# 所以要匹配出所有的数字串，应当用[0-9]+, 或者\d+

# 如果要限定长度，就用{}代替+，大括号里写上你想要的长度。比如11位的数字：\d{11}
# 想要再把第一位限定为1，就在前面加上1，后面去掉一位：1\d{10}
def main(text='13581974134'):
    if text:
        tel = text
    else:
        tel = input("请输入手机号:")

    # ret = re.match(r"1[35678]\d{9}", tel)
    # 由于手机号位数大于11位也能匹配成功，所以修改如下：
    ret = re.match(r"^1[35678]\d{9}$", tel)

    if ret:
        print(ret)
        print("匹配成功")
    else:
        print("匹配失败")


if __name__ == "__main__":
    main(text='13581974135')

"""
# 常用的元字符还有：
\b、\d、.、\S

\w - 匹配字母或数字或下划线或汉字（我试验下了，发现python 3.x版本可以匹配汉字，
但2.x版本不可以）

\s - 匹配任意的空白符

^ - 匹配字符串的开始

$ - 匹配字符串的结束

\S 其实就是\s的反义，任意不是空白符的字符。

\W - 匹配任意不是字母，数字，下划线，汉字的字符

\D - 匹配任意非数字的字符

\B - 匹配不是单词开头或结束的位置

[a]的反义是[^a]，表示除a以外的任意字符。[^abcd]就是除abcd以外的任意字符。

之前我们用过*、+、{}来表示字符的重复。其他重复的方式还有：

? - 重复零次或一次

{n,} - 重复n次或更多次

{n,m} - 重复n到m次

正则表达式不只是用来从一大段文字中抓取信息，很多时候也被用来判断输入的文本是否符合规范，
或进行分类。来点例子看看：

^\w{4,12}$

这个表示一段4到12位的字符，包括字母或数字或下划线或汉字，
可以用来作为用户注册时检测用户名的规则。（但汉字在python2.x里面可能会有问题）

\d{15,18}

表示15到18位的数字，可以用来检测身份证号码

^1\d*x?

以1开头的一串数字，数字结尾有字母x，也可以没有。有的话就带上x。

另外再说一下之前提到的转义字符\。如果我们确实要匹配.或者*字符本身，
而不是要它们所代表的元字符，那就需要用\.或\*。\本身也需要用\\。

比如"\d+\.\d+"可以匹配出123.456这样的结果。

留一道稍稍有难度的习题：

写一个正则表达式，能匹配出多种格式的电话号码，包括

(021)88776543

010-55667890

02584453362

0571 66345673
"""

'''
# Reference:
https://www.cnblogs.com/xingchuxin/p/10433444.html

# Running Code:
cd /f/Github/xiangxing98.github.io/Python_Learning
python lesson57_Regular_Expression_4.py
'''
